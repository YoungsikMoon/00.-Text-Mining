#봄툰 전체 스크랩핑 (코드 보완 필요)
# ! pip install openpyxl
# ! pip install requests
# ! pip install pandas
import requests
import json
from tqdm import tqdm
import pandas as pd

# 1단계 : 해당 도메인의 툰 정보를 얻기위해선 제일 먼저 요일별 제공하는 툰 고유 id를 알아야한다는 특성이 있어서 id부터 스크랩한다.
weeks = ('MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY')

db = {"toons_ids":[],
      "toons":{}
      }

for week in tqdm(weeks,desc='각 요일 돌면서 전체 만화 id 스크랩'):
    url = f'https://www.bomtoon.com/api/balcony-api-v2/contents/tab/schedule/comic?groupMenu={week}&isIncludeTen=false&sort=POPULAR&adultToggle=false'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
        'X-Balcony-Id': 'BOMTOON_COM'
    }
    resp = requests.request("GET", url, headers=headers)
    jsn = json.loads(resp.text)
    lens = len(jsn['data'])
    for l in range(lens):
        db['toons_ids'].append(jsn['data'][l])
        
# 2 단계 : 툰ids를 기반으로 툰 상세정보를 스크랩한다.
url = f'https://www.bomtoon.com/api/balcony-api-v2/contents/tab/details'
contentsIdsid = db['toons_ids']
contentsIdsid = ','.join(map(str, db['toons_ids']))
# print(contentsIdsid)
payloads = json.dumps({
    "contentsIds": contentsIdsid,
    "contentsThumbnailType": "VERTICAL,MAIN,SQUARE"
})

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
    'X-Balcony-Id': 'BOMTOON_COM',
    'Content-Type': 'application/json'
}

resp = requests.request("POST", url, headers=headers, data=payloads)
jsn = json.loads(resp.text)
lens = len(jsn['data'])
for l in range(lens):
    title = jsn['data'][l]['title']
    alias = jsn['data'][l]['alias']
    id = jsn['data'][l]['id']
    creators= jsn['data'][l]['creators']
    viewCount= jsn['data'][l]['viewCount']
    isAdult = jsn['data'][l]['isAdult']
    badgeUp = jsn['data'][l]['badgeUp']
    # alias를 활용해서 각 만화의 상세정보를 더 추출한다.
    toon_url= f'https://www.bomtoon.com/api/balcony-api-v2/contents/{alias}?isNotLoginAdult=false&isPorch=false'
    toon_resp = requests.request("GET", toon_url, headers=headers)
    toon_jsn = json.loads(toon_resp.text)
    schedules = toon_jsn['data']['schedules'][0]
    tag = toon_jsn['data']['tag']
    type = toon_jsn['data']['type']
    commentCount = toon_jsn['data']['commentCount']
    favoriteCount = toon_jsn['data']['favoriteCount']
    allepisodes = {}#누적회차수(프롤로그포함) 만큼 길이의 리스트를 만듦
    reviews = []
    for episode in tqdm(range(len(toon_jsn['data']['episodes'])),desc=f'{title} 정보 수집중'):        
        epi = toon_jsn['data']['episodes'][episode]['alias']
        list(epi)
        allepisodes = {epi}
        if commentCount != 0: #댓글이 있는지 확인
            review_url = f'https://www.bomtoon.com/api/balcony-api/comment/contents/{alias}/{epi}?isBest=true&page=0' #리뷰가 존재하면 리뷰페이지가 몇개인지 확인
            headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36',
                    'X-Balcony-Id': 'BOMTOON_COM',
                    'Content-Type': 'application/json'
                }
            review_resp = requests.request('GET', review_url ,headers=headers)
            review_jsn = json.loads(review_resp.text)
            review_totalPages = review_jsn['data']['comment']['totalPages']
            for reviewpage in range(review_totalPages): #리뷰 페이지 수 만큼 반복
                review_page_url = f'https://www.bomtoon.com/api/balcony-api/comment/contents/{alias}/{epi}?isBest=true&page={reviewpage}'
                review_page_resp = requests.request('GET', review_page_url ,headers=headers)
                review_page_jsn = json.loads(review_resp.text)
                pagereviewnum = len(review_page_jsn['data']['comment']['content'])#리뷰한페이지에 있는 리뷰 갯수 확인
                for pagereview in range(pagereviewnum):#갯수만큼 각 리뷰를 에피소드에 적재
                    rewview = review_jsn['data']['comment']['content'][pagereview]['comment']
                    reviews.append(rewview)
                    allepisodes = {epi : reviews}
            # else : reviews.append("댓글이 없습니다.")

    epinum = len(allepisodes)
    db['toons'][title] = {
        'id' : id,
        '별칭' : alias,
        '제목' : title,
        '작가' : creators,
        '누적조회수' : viewCount,
        '성인물' : isAdult,
        '요일' : schedules,
        '업데이트' : badgeUp,
        '태그' : tag,
        '타입' : type,
        '총댓글수' : commentCount,
        '관심수' : favoriteCount,
        '총에피소드수' : epinum,
        '에피소드' : allepisodes,
        # '댓글' : reviews
        }        
df = pd.DataFrame(db['toons']).transpose() #컬럼과 인덱스 교
df.to_excel('bomtton.xlsx', index=False)
